generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")

  projects Project[]
  sessions Session[]

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

enum ProjectStatus {
  created
  pinecone
  openai
  embedding
}

model Project {
  id                      String @id @default(cuid())
  name                    String
  websiteUrl              String @map(name: "website_url")
  match                   String
  cssSelector             String @map(name: "css_selector")
  maxPageToCrawl          Int?   @map(name: "max_page_to_crawl")
  numberOfRequests        Int?
  numberOfArticlesCrawled Int?

  //pinecone
  pineconeApiKey      String? @map("pinecone_api_key")
  pineconeIndexName   String? @map("pinecone_indexName")
  pineconeEnvironment String? @map("pinecone_environment")

  //openai
  openaiApiKey String? @map("openai_api_key")

  //status
  status ProjectStatus? @default(pinecone)

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  Creator   User?   @relation(fields: [creatorId], references: [id])
  creatorId String?

  @@index([id, creatorId])
  @@map(name: "projects")
}

model userwaitlist {
  id       String @id @default(cuid())
  email    String @unique
  username String
}
